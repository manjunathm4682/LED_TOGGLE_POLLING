
led_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000149c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001598  08001598  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001598  08001598  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001598  08001598  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001598  08001598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800159c  0800159c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080015ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080015ac  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ddf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001039  00000000  00000000  00023e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00024e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001993b  00000000  00000000  00025808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056a5  00000000  00000000  0003f143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a62a9  00000000  00000000  000447e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaa91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000109c  00000000  00000000  000eaae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001540 	.word	0x08001540

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001540 	.word	0x08001540

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f918 	bl	8000454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f818 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f85e 	bl	80002e8 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 800022c:	2380      	movs	r3, #128	; 0x80
 800022e:	015b      	lsls	r3, r3, #5
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <main+0x38>)
 8000232:	0019      	movs	r1, r3
 8000234:	0010      	movs	r0, r2
 8000236:	f000 fbd7 	bl	80009e8 <HAL_GPIO_ReadPin>
 800023a:	1e03      	subs	r3, r0, #0
 800023c:	d1f6      	bne.n	800022c <main+0x10>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <main+0x38>)
 8000240:	2180      	movs	r1, #128	; 0x80
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fc0a 	bl	8000a5c <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);   //updated delay
 8000248:	23fa      	movs	r3, #250	; 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 f987 	bl	8000560 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000252:	e7eb      	b.n	800022c <main+0x10>
 8000254:	50000400 	.word	0x50000400

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b095      	sub	sp, #84	; 0x54
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2414      	movs	r4, #20
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	233c      	movs	r3, #60	; 0x3c
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 f961 	bl	8001530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f001 f95a 	bl	8001530 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fc07 	bl	8000a94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2240      	movs	r2, #64	; 0x40
 800029e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fc33 	bl	8000b14 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002b2:	f000 f85f 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2207      	movs	r2, #7
 80002ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2100      	movs	r1, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ff7e 	bl	80011d4 <HAL_RCC_ClockConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002dc:	f000 f84a 	bl	8000374 <Error_Handler>
  }
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b015      	add	sp, #84	; 0x54
 80002e6:	bd90      	pop	{r4, r7, pc}

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2314      	movs	r3, #20
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f001 f91a 	bl	8001530 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_GPIO_Init+0x84>)
 80002fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_GPIO_Init+0x84>)
 8000302:	2102      	movs	r1, #2
 8000304:	430a      	orrs	r2, r1
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_GPIO_Init+0x84>)
 800030a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800030c:	2202      	movs	r2, #2
 800030e:	4013      	ands	r3, r2
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_GPIO_Init+0x88>)
 8000316:	2200      	movs	r2, #0
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fb81 	bl	8000a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	0152      	lsls	r2, r2, #5
 8000326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2201      	movs	r2, #1
 8000332:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <MX_GPIO_Init+0x88>)
 8000338:	0019      	movs	r1, r3
 800033a:	0010      	movs	r0, r2
 800033c:	f000 f9e8 	bl	8000710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2201      	movs	r2, #1
 800034a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <MX_GPIO_Init+0x88>)
 800035c:	0019      	movs	r1, r3
 800035e:	0010      	movs	r0, r2
 8000360:	f000 f9d6 	bl	8000710 <HAL_GPIO_Init>

}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b006      	add	sp, #24
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	50000400 	.word	0x50000400

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x44>)
 8000388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <HAL_MspInit+0x44>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	641a      	str	r2, [r3, #64]	; 0x40
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x44>)
 8000394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <HAL_MspInit+0x44>)
 80003a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_MspInit+0x44>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0549      	lsls	r1, r1, #21
 80003a8:	430a      	orrs	r2, r1
 80003aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_MspInit+0x44>)
 80003ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	055b      	lsls	r3, r3, #21
 80003b4:	4013      	ands	r3, r2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <NMI_Handler+0x4>

080003ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f89c 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000402:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000404:	f7ff fff7 	bl	80003f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	; (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042e:	f001 f85b 	bl	80014e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000432:	f7ff fef3 	bl	800021c <main>

08000436 <LoopForever>:

LoopForever:
  b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   r0, =_estack
 8000438:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000444:	080015a0 	.word	0x080015a0
  ldr r2, =_sbss
 8000448:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800044c:	2000002c 	.word	0x2000002c

08000450 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC1_COMP_IRQHandler>
	...

08000454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <HAL_Init+0x3c>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_Init+0x3c>)
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	0049      	lsls	r1, r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800046e:	2003      	movs	r0, #3
 8000470:	f000 f810 	bl	8000494 <HAL_InitTick>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d003      	beq.n	8000480 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e001      	b.n	8000484 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000480:	f7ff ff7e 	bl	8000380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40022000 	.word	0x40022000

08000494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800049c:	230f      	movs	r3, #15
 800049e:	18fb      	adds	r3, r7, r3
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <HAL_InitTick+0x88>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d02b      	beq.n	8000504 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <HAL_InitTick+0x8c>)
 80004ae:	681c      	ldr	r4, [r3, #0]
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <HAL_InitTick+0x88>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	0019      	movs	r1, r3
 80004b6:	23fa      	movs	r3, #250	; 0xfa
 80004b8:	0098      	lsls	r0, r3, #2
 80004ba:	f7ff fe23 	bl	8000104 <__udivsi3>
 80004be:	0003      	movs	r3, r0
 80004c0:	0019      	movs	r1, r3
 80004c2:	0020      	movs	r0, r4
 80004c4:	f7ff fe1e 	bl	8000104 <__udivsi3>
 80004c8:	0003      	movs	r3, r0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 f913 	bl	80006f6 <HAL_SYSTICK_Config>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d112      	bne.n	80004fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d80a      	bhi.n	80004f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	2301      	movs	r3, #1
 80004de:	425b      	negs	r3, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f8f2 	bl	80006cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x90>)
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	e00d      	b.n	800050c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80004f0:	230f      	movs	r3, #15
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e008      	b.n	800050c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004fa:	230f      	movs	r3, #15
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e003      	b.n	800050c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000504:	230f      	movs	r3, #15
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800050c:	230f      	movs	r3, #15
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b005      	add	sp, #20
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000008 	.word	0x20000008
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_IncTick+0x1c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	001a      	movs	r2, r3
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_IncTick+0x20>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	18d2      	adds	r2, r2, r3
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_IncTick+0x20>)
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000008 	.word	0x20000008
 8000548:	20000028 	.word	0x20000028

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <HAL_GetTick+0x10>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	20000028 	.word	0x20000028

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000568:	f7ff fff0 	bl	800054c <HAL_GetTick>
 800056c:	0003      	movs	r3, r0
 800056e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	d005      	beq.n	8000586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_Delay+0x44>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	001a      	movs	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	189b      	adds	r3, r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	f7ff ffe0 	bl	800054c <HAL_GetTick>
 800058c:	0002      	movs	r2, r0
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	429a      	cmp	r2, r3
 8000596:	d8f7      	bhi.n	8000588 <HAL_Delay+0x28>
  {
  }
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000008 	.word	0x20000008

080005a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	0002      	movs	r2, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b7f      	cmp	r3, #127	; 0x7f
 80005bc:	d828      	bhi.n	8000610 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	4a2f      	ldr	r2, [pc, #188]	; (800067c <__NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	33c0      	adds	r3, #192	; 0xc0
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	589b      	ldr	r3, [r3, r2]
 80005ce:	1dfa      	adds	r2, r7, #7
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	0011      	movs	r1, r2
 80005d4:	2203      	movs	r2, #3
 80005d6:	400a      	ands	r2, r1
 80005d8:	00d2      	lsls	r2, r2, #3
 80005da:	21ff      	movs	r1, #255	; 0xff
 80005dc:	4091      	lsls	r1, r2
 80005de:	000a      	movs	r2, r1
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	401a      	ands	r2, r3
 80005e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	22ff      	movs	r2, #255	; 0xff
 80005ec:	401a      	ands	r2, r3
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	0018      	movs	r0, r3
 80005f4:	2303      	movs	r3, #3
 80005f6:	4003      	ands	r3, r0
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fc:	481f      	ldr	r0, [pc, #124]	; (800067c <__NVIC_SetPriority+0xd4>)
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b25b      	sxtb	r3, r3
 8000604:	089b      	lsrs	r3, r3, #2
 8000606:	430a      	orrs	r2, r1
 8000608:	33c0      	adds	r3, #192	; 0xc0
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800060e:	e031      	b.n	8000674 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <__NVIC_SetPriority+0xd8>)
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	0019      	movs	r1, r3
 8000618:	230f      	movs	r3, #15
 800061a:	400b      	ands	r3, r1
 800061c:	3b08      	subs	r3, #8
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	3306      	adds	r3, #6
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	3304      	adds	r3, #4
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1dfa      	adds	r2, r7, #7
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	0011      	movs	r1, r2
 8000630:	2203      	movs	r2, #3
 8000632:	400a      	ands	r2, r1
 8000634:	00d2      	lsls	r2, r2, #3
 8000636:	21ff      	movs	r1, #255	; 0xff
 8000638:	4091      	lsls	r1, r2
 800063a:	000a      	movs	r2, r1
 800063c:	43d2      	mvns	r2, r2
 800063e:	401a      	ands	r2, r3
 8000640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	019b      	lsls	r3, r3, #6
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	401a      	ands	r2, r3
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	0018      	movs	r0, r3
 8000650:	2303      	movs	r3, #3
 8000652:	4003      	ands	r3, r0
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <__NVIC_SetPriority+0xd8>)
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	001c      	movs	r4, r3
 8000660:	230f      	movs	r3, #15
 8000662:	4023      	ands	r3, r4
 8000664:	3b08      	subs	r3, #8
 8000666:	089b      	lsrs	r3, r3, #2
 8000668:	430a      	orrs	r2, r1
 800066a:	3306      	adds	r3, #6
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	18c3      	adds	r3, r0, r3
 8000670:	3304      	adds	r3, #4
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b003      	add	sp, #12
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	1e5a      	subs	r2, r3, #1
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	045b      	lsls	r3, r3, #17
 8000694:	429a      	cmp	r2, r3
 8000696:	d301      	bcc.n	800069c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000698:	2301      	movs	r3, #1
 800069a:	e010      	b.n	80006be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <SysTick_Config+0x44>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	3a01      	subs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a4:	2301      	movs	r3, #1
 80006a6:	425b      	negs	r3, r3
 80006a8:	2103      	movs	r1, #3
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff ff7c 	bl	80005a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SysTick_Config+0x44>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SysTick_Config+0x44>)
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006bc:	2300      	movs	r3, #0
}
 80006be:	0018      	movs	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	e000e010 	.word	0xe000e010

080006cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	210f      	movs	r1, #15
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	1c02      	adds	r2, r0, #0
 80006dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff ff5d 	bl	80005a8 <__NVIC_SetPriority>
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ffbf 	bl	8000684 <SysTick_Config>
 8000706:	0003      	movs	r3, r0
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071e:	e14d      	b.n	80009bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	4091      	lsls	r1, r2
 800072a:	000a      	movs	r2, r1
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <HAL_GPIO_Init+0x28>
 8000736:	e13e      	b.n	80009b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2203      	movs	r2, #3
 800073e:	4013      	ands	r3, r2
 8000740:	2b01      	cmp	r3, #1
 8000742:	d005      	beq.n	8000750 <HAL_GPIO_Init+0x40>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2203      	movs	r2, #3
 800074a:	4013      	ands	r3, r2
 800074c:	2b02      	cmp	r3, #2
 800074e:	d130      	bne.n	80007b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	2203      	movs	r2, #3
 800075c:	409a      	lsls	r2, r3
 800075e:	0013      	movs	r3, r2
 8000760:	43da      	mvns	r2, r3
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	409a      	lsls	r2, r3
 8000772:	0013      	movs	r3, r2
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	4313      	orrs	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000786:	2201      	movs	r2, #1
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
 800078c:	0013      	movs	r3, r2
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	2201      	movs	r2, #1
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2203      	movs	r2, #3
 80007b8:	4013      	ands	r3, r2
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d017      	beq.n	80007ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	2203      	movs	r2, #3
 80007ca:	409a      	lsls	r2, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	43da      	mvns	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4013      	ands	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	409a      	lsls	r2, r3
 80007e0:	0013      	movs	r3, r2
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2203      	movs	r2, #3
 80007f4:	4013      	ands	r3, r2
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d123      	bne.n	8000842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	08da      	lsrs	r2, r3, #3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3208      	adds	r2, #8
 8000802:	0092      	lsls	r2, r2, #2
 8000804:	58d3      	ldr	r3, [r2, r3]
 8000806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2207      	movs	r2, #7
 800080c:	4013      	ands	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	220f      	movs	r2, #15
 8000812:	409a      	lsls	r2, r3
 8000814:	0013      	movs	r3, r2
 8000816:	43da      	mvns	r2, r3
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	4013      	ands	r3, r2
 800081c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	691a      	ldr	r2, [r3, #16]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2107      	movs	r1, #7
 8000826:	400b      	ands	r3, r1
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	409a      	lsls	r2, r3
 800082c:	0013      	movs	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4313      	orrs	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3208      	adds	r2, #8
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	6939      	ldr	r1, [r7, #16]
 8000840:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	2203      	movs	r2, #3
 800084e:	409a      	lsls	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	43da      	mvns	r2, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4013      	ands	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2203      	movs	r2, #3
 8000860:	401a      	ands	r2, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	409a      	lsls	r2, r3
 8000868:	0013      	movs	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	23c0      	movs	r3, #192	; 0xc0
 800087c:	029b      	lsls	r3, r3, #10
 800087e:	4013      	ands	r3, r2
 8000880:	d100      	bne.n	8000884 <HAL_GPIO_Init+0x174>
 8000882:	e098      	b.n	80009b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000884:	4a53      	ldr	r2, [pc, #332]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	3318      	adds	r3, #24
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	589b      	ldr	r3, [r3, r2]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2203      	movs	r2, #3
 8000896:	4013      	ands	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	220f      	movs	r2, #15
 800089c:	409a      	lsls	r2, r3
 800089e:	0013      	movs	r3, r2
 80008a0:	43da      	mvns	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d019      	beq.n	80008e6 <HAL_GPIO_Init+0x1d6>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <HAL_GPIO_Init+0x2c8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d013      	beq.n	80008e2 <HAL_GPIO_Init+0x1d2>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a47      	ldr	r2, [pc, #284]	; (80009dc <HAL_GPIO_Init+0x2cc>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d00d      	beq.n	80008de <HAL_GPIO_Init+0x1ce>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a46      	ldr	r2, [pc, #280]	; (80009e0 <HAL_GPIO_Init+0x2d0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d007      	beq.n	80008da <HAL_GPIO_Init+0x1ca>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a45      	ldr	r2, [pc, #276]	; (80009e4 <HAL_GPIO_Init+0x2d4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_GPIO_Init+0x1c6>
 80008d2:	2304      	movs	r3, #4
 80008d4:	e008      	b.n	80008e8 <HAL_GPIO_Init+0x1d8>
 80008d6:	2305      	movs	r3, #5
 80008d8:	e006      	b.n	80008e8 <HAL_GPIO_Init+0x1d8>
 80008da:	2303      	movs	r3, #3
 80008dc:	e004      	b.n	80008e8 <HAL_GPIO_Init+0x1d8>
 80008de:	2302      	movs	r3, #2
 80008e0:	e002      	b.n	80008e8 <HAL_GPIO_Init+0x1d8>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <HAL_GPIO_Init+0x1d8>
 80008e6:	2300      	movs	r3, #0
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	2103      	movs	r1, #3
 80008ec:	400a      	ands	r2, r1
 80008ee:	00d2      	lsls	r2, r2, #3
 80008f0:	4093      	lsls	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80008f8:	4936      	ldr	r1, [pc, #216]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	3318      	adds	r3, #24
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	43da      	mvns	r2, r3
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	035b      	lsls	r3, r3, #13
 800091e:	4013      	ands	r3, r2
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	039b      	lsls	r3, r3, #14
 8000948:	4013      	ands	r3, r2
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 800095c:	2384      	movs	r3, #132	; 0x84
 800095e:	58d3      	ldr	r3, [r2, r3]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	4013      	ands	r3, r2
 8000976:	d003      	beq.n	8000980 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000980:	4914      	ldr	r1, [pc, #80]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 8000982:	2284      	movs	r2, #132	; 0x84
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	58d3      	ldr	r3, [r2, r3]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	025b      	lsls	r3, r3, #9
 80009a2:	4013      	ands	r3, r2
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009ae:	4909      	ldr	r1, [pc, #36]	; (80009d4 <HAL_GPIO_Init+0x2c4>)
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	40da      	lsrs	r2, r3
 80009c4:	1e13      	subs	r3, r2, #0
 80009c6:	d000      	beq.n	80009ca <HAL_GPIO_Init+0x2ba>
 80009c8:	e6aa      	b.n	8000720 <HAL_GPIO_Init+0x10>
  }
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b006      	add	sp, #24
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021800 	.word	0x40021800
 80009d8:	50000400 	.word	0x50000400
 80009dc:	50000800 	.word	0x50000800
 80009e0:	50000c00 	.word	0x50000c00
 80009e4:	50001000 	.word	0x50001000

080009e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	000a      	movs	r2, r1
 80009f2:	1cbb      	adds	r3, r7, #2
 80009f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	1cba      	adds	r2, r7, #2
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	4013      	ands	r3, r2
 8000a00:	d004      	beq.n	8000a0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000a02:	230f      	movs	r3, #15
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e003      	b.n	8000a14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	0008      	movs	r0, r1
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	1cbb      	adds	r3, r7, #2
 8000a30:	1c02      	adds	r2, r0, #0
 8000a32:	801a      	strh	r2, [r3, #0]
 8000a34:	1c7b      	adds	r3, r7, #1
 8000a36:	1c0a      	adds	r2, r1, #0
 8000a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a3a:	1c7b      	adds	r3, r7, #1
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a42:	1cbb      	adds	r3, r7, #2
 8000a44:	881a      	ldrh	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a4a:	e003      	b.n	8000a54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a4c:	1cbb      	adds	r3, r7, #2
 8000a4e:	881a      	ldrh	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	000a      	movs	r2, r1
 8000a66:	1cbb      	adds	r3, r7, #2
 8000a68:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a70:	1cbb      	adds	r3, r7, #2
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	041a      	lsls	r2, r3, #16
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	1cb9      	adds	r1, r7, #2
 8000a80:	8809      	ldrh	r1, [r1, #0]
 8000a82:	400b      	ands	r3, r1
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	619a      	str	r2, [r3, #24]
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d11f      	bne.n	8000af8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	0013      	movs	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	189b      	adds	r3, r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4912      	ldr	r1, [pc, #72]	; (8000b10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fb1c 	bl	8000104 <__udivsi3>
 8000acc:	0003      	movs	r3, r0
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ad2:	e008      	b.n	8000ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e001      	b.n	8000ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e009      	b.n	8000afa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	401a      	ands	r2, r3
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d0ed      	beq.n	8000ad4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40007000 	.word	0x40007000
 8000b08:	fffff9ff 	.word	0xfffff9ff
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	000f4240 	.word	0x000f4240

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f000 fb50 	bl	80011c8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d100      	bne.n	8000b34 <HAL_RCC_OscConfig+0x20>
 8000b32:	e07c      	b.n	8000c2e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b34:	4bc3      	ldr	r3, [pc, #780]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	2238      	movs	r2, #56	; 0x38
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b3e:	4bc1      	ldr	r3, [pc, #772]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	2203      	movs	r2, #3
 8000b44:	4013      	ands	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	d102      	bne.n	8000b54 <HAL_RCC_OscConfig+0x40>
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d002      	beq.n	8000b5a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d10b      	bne.n	8000b72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5a:	4bba      	ldr	r3, [pc, #744]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	029b      	lsls	r3, r3, #10
 8000b62:	4013      	ands	r3, r2
 8000b64:	d062      	beq.n	8000c2c <HAL_RCC_OscConfig+0x118>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d15e      	bne.n	8000c2c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e32a      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d107      	bne.n	8000b8e <HAL_RCC_OscConfig+0x7a>
 8000b7e:	4bb1      	ldr	r3, [pc, #708]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4bb0      	ldr	r3, [pc, #704]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0249      	lsls	r1, r1, #9
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e020      	b.n	8000bd0 <HAL_RCC_OscConfig+0xbc>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	02db      	lsls	r3, r3, #11
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d10e      	bne.n	8000bb8 <HAL_RCC_OscConfig+0xa4>
 8000b9a:	4baa      	ldr	r3, [pc, #680]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4ba9      	ldr	r3, [pc, #676]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	02c9      	lsls	r1, r1, #11
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	4ba6      	ldr	r3, [pc, #664]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4ba5      	ldr	r3, [pc, #660]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	0249      	lsls	r1, r1, #9
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_RCC_OscConfig+0xbc>
 8000bb8:	4ba2      	ldr	r3, [pc, #648]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4ba1      	ldr	r3, [pc, #644]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bbe:	49a2      	ldr	r1, [pc, #648]	; (8000e48 <HAL_RCC_OscConfig+0x334>)
 8000bc0:	400a      	ands	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	4b9f      	ldr	r3, [pc, #636]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b9e      	ldr	r3, [pc, #632]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bca:	49a0      	ldr	r1, [pc, #640]	; (8000e4c <HAL_RCC_OscConfig+0x338>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d014      	beq.n	8000c02 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fcb8 	bl	800054c <HAL_GetTick>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be2:	f7ff fcb3 	bl	800054c <HAL_GetTick>
 8000be6:	0002      	movs	r2, r0
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b64      	cmp	r3, #100	; 0x64
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e2e9      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bf4:	4b93      	ldr	r3, [pc, #588]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	d0f0      	beq.n	8000be2 <HAL_RCC_OscConfig+0xce>
 8000c00:	e015      	b.n	8000c2e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c02:	f7ff fca3 	bl	800054c <HAL_GetTick>
 8000c06:	0003      	movs	r3, r0
 8000c08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fc9e 	bl	800054c <HAL_GetTick>
 8000c10:	0002      	movs	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e2d4      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	029b      	lsls	r3, r3, #10
 8000c26:	4013      	ands	r3, r2
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0xf8>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2202      	movs	r2, #2
 8000c34:	4013      	ands	r3, r2
 8000c36:	d100      	bne.n	8000c3a <HAL_RCC_OscConfig+0x126>
 8000c38:	e099      	b.n	8000d6e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3a:	4b82      	ldr	r3, [pc, #520]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2238      	movs	r2, #56	; 0x38
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c44:	4b7f      	ldr	r3, [pc, #508]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b10      	cmp	r3, #16
 8000c52:	d102      	bne.n	8000c5a <HAL_RCC_OscConfig+0x146>
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d002      	beq.n	8000c60 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d135      	bne.n	8000ccc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c60:	4b78      	ldr	r3, [pc, #480]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_OscConfig+0x164>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e2a7      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a74      	ldr	r2, [pc, #464]	; (8000e50 <HAL_RCC_OscConfig+0x33c>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	0019      	movs	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	021a      	lsls	r2, r3, #8
 8000c88:	4b6e      	ldr	r3, [pc, #440]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d112      	bne.n	8000cba <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c94:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a6e      	ldr	r2, [pc, #440]	; (8000e54 <HAL_RCC_OscConfig+0x340>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ca8:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	0adb      	lsrs	r3, r3, #11
 8000cae:	2207      	movs	r2, #7
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	4a69      	ldr	r2, [pc, #420]	; (8000e58 <HAL_RCC_OscConfig+0x344>)
 8000cb4:	40da      	lsrs	r2, r3
 8000cb6:	4b69      	ldr	r3, [pc, #420]	; (8000e5c <HAL_RCC_OscConfig+0x348>)
 8000cb8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cba:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <HAL_RCC_OscConfig+0x34c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fbe8 	bl	8000494 <HAL_InitTick>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d051      	beq.n	8000d6c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e27d      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d030      	beq.n	8000d36 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a5e      	ldr	r2, [pc, #376]	; (8000e54 <HAL_RCC_OscConfig+0x340>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	4b58      	ldr	r3, [pc, #352]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b56      	ldr	r3, [pc, #344]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0049      	lsls	r1, r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc29 	bl	800054c <HAL_GetTick>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d00:	f7ff fc24 	bl	800054c <HAL_GetTick>
 8000d04:	0002      	movs	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e25a      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d0f0      	beq.n	8000d00 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <HAL_RCC_OscConfig+0x33c>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	0019      	movs	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	021a      	lsls	r2, r3, #8
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d30:	430a      	orrs	r2, r1
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	e01b      	b.n	8000d6e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d3c:	4949      	ldr	r1, [pc, #292]	; (8000e64 <HAL_RCC_OscConfig+0x350>)
 8000d3e:	400a      	ands	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d42:	f7ff fc03 	bl	800054c <HAL_GetTick>
 8000d46:	0003      	movs	r3, r0
 8000d48:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fbfe 	bl	800054c <HAL_GetTick>
 8000d50:	0002      	movs	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e234      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x238>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2208      	movs	r2, #8
 8000d74:	4013      	ands	r3, r2
 8000d76:	d047      	beq.n	8000e08 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2238      	movs	r2, #56	; 0x38
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b18      	cmp	r3, #24
 8000d82:	d10a      	bne.n	8000d9a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d03c      	beq.n	8000e08 <HAL_RCC_OscConfig+0x2f4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d138      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e216      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d019      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000da4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dae:	f7ff fbcd 	bl	800054c <HAL_GetTick>
 8000db2:	0003      	movs	r3, r0
 8000db4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fbc8 	bl	800054c <HAL_GetTick>
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1fe      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d0f1      	beq.n	8000db8 <HAL_RCC_OscConfig+0x2a4>
 8000dd4:	e018      	b.n	8000e08 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	438a      	bics	r2, r1
 8000de0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de2:	f7ff fbb3 	bl	800054c <HAL_GetTick>
 8000de6:	0003      	movs	r3, r0
 8000de8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fbae 	bl	800054c <HAL_GetTick>
 8000df0:	0002      	movs	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e1e4      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	2202      	movs	r2, #2
 8000e04:	4013      	ands	r3, r2
 8000e06:	d1f1      	bne.n	8000dec <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d100      	bne.n	8000e14 <HAL_RCC_OscConfig+0x300>
 8000e12:	e0c7      	b.n	8000fa4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e14:	231f      	movs	r3, #31
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2238      	movs	r2, #56	; 0x38
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b20      	cmp	r3, #32
 8000e26:	d11f      	bne.n	8000e68 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_RCC_OscConfig+0x330>)
 8000e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d100      	bne.n	8000e34 <HAL_RCC_OscConfig+0x320>
 8000e32:	e0b7      	b.n	8000fa4 <HAL_RCC_OscConfig+0x490>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d000      	beq.n	8000e3e <HAL_RCC_OscConfig+0x32a>
 8000e3c:	e0b2      	b.n	8000fa4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e1c2      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000
 8000e48:	fffeffff 	.word	0xfffeffff
 8000e4c:	fffbffff 	.word	0xfffbffff
 8000e50:	ffff80ff 	.word	0xffff80ff
 8000e54:	ffffc7ff 	.word	0xffffc7ff
 8000e58:	00f42400 	.word	0x00f42400
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000004 	.word	0x20000004
 8000e64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000e68:	4bb5      	ldr	r3, [pc, #724]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	055b      	lsls	r3, r3, #21
 8000e70:	4013      	ands	r3, r2
 8000e72:	d101      	bne.n	8000e78 <HAL_RCC_OscConfig+0x364>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_RCC_OscConfig+0x366>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4bb0      	ldr	r3, [pc, #704]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e82:	4baf      	ldr	r3, [pc, #700]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0549      	lsls	r1, r1, #21
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e8c:	4bac      	ldr	r3, [pc, #688]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	055b      	lsls	r3, r3, #21
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ea2:	4ba8      	ldr	r3, [pc, #672]	; (8001144 <HAL_RCC_OscConfig+0x630>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d11a      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eae:	4ba5      	ldr	r3, [pc, #660]	; (8001144 <HAL_RCC_OscConfig+0x630>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4ba4      	ldr	r3, [pc, #656]	; (8001144 <HAL_RCC_OscConfig+0x630>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0049      	lsls	r1, r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fb46 	bl	800054c <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec6:	f7ff fb41 	bl	800054c <HAL_GetTick>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e177      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed8:	4b9a      	ldr	r3, [pc, #616]	; (8001144 <HAL_RCC_OscConfig+0x630>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x3e6>
 8000eec:	4b94      	ldr	r3, [pc, #592]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ef0:	4b93      	ldr	r3, [pc, #588]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ef8:	e01c      	b.n	8000f34 <HAL_RCC_OscConfig+0x420>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x408>
 8000f02:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f06:	4b8e      	ldr	r3, [pc, #568]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f08:	2104      	movs	r1, #4
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f0e:	4b8c      	ldr	r3, [pc, #560]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f12:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f1a:	e00b      	b.n	8000f34 <HAL_RCC_OscConfig+0x420>
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	438a      	bics	r2, r1
 8000f26:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f28:	4b85      	ldr	r3, [pc, #532]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f2c:	4b84      	ldr	r3, [pc, #528]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f2e:	2104      	movs	r1, #4
 8000f30:	438a      	bics	r2, r1
 8000f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d014      	beq.n	8000f66 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb06 	bl	800054c <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f44:	e009      	b.n	8000f5a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fb01 	bl	800054c <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4a7d      	ldr	r2, [pc, #500]	; (8001148 <HAL_RCC_OscConfig+0x634>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e136      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f5a:	4b79      	ldr	r3, [pc, #484]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x432>
 8000f64:	e013      	b.n	8000f8e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f66:	f7ff faf1 	bl	800054c <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f6e:	e009      	b.n	8000f84 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f70:	f7ff faec 	bl	800054c <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a73      	ldr	r2, [pc, #460]	; (8001148 <HAL_RCC_OscConfig+0x634>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e121      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000f8e:	231f      	movs	r3, #31
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9c:	4b68      	ldr	r3, [pc, #416]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000f9e:	496b      	ldr	r1, [pc, #428]	; (800114c <HAL_RCC_OscConfig+0x638>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	4013      	ands	r3, r2
 8000fac:	d039      	beq.n	8001022 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01b      	beq.n	8000fee <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000fb6:	4b62      	ldr	r3, [pc, #392]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	03c9      	lsls	r1, r1, #15
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fac2 	bl	800054c <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fce:	f7ff fabd 	bl	800054c <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e0f3      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000fe0:	4b57      	ldr	r3, [pc, #348]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x4ba>
 8000fec:	e019      	b.n	8001022 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8000ff4:	4956      	ldr	r1, [pc, #344]	; (8001150 <HAL_RCC_OscConfig+0x63c>)
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffa:	f7ff faa7 	bl	800054c <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001004:	f7ff faa2 	bl	800054c <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e0d8      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001016:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	4013      	ands	r3, r2
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_RCC_OscConfig+0x518>
 800102a:	e0cc      	b.n	80011c6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2238      	movs	r2, #56	; 0x38
 8001032:	4013      	ands	r3, r2
 8001034:	2b10      	cmp	r3, #16
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x526>
 8001038:	e07b      	b.n	8001132 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d156      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8001048:	4942      	ldr	r1, [pc, #264]	; (8001154 <HAL_RCC_OscConfig+0x640>)
 800104a:	400a      	ands	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fa7d 	bl	800054c <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fa78 	bl	800054c <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e0ae      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	049b      	lsls	r3, r3, #18
 8001072:	4013      	ands	r3, r2
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001076:	4b32      	ldr	r3, [pc, #200]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4a37      	ldr	r2, [pc, #220]	; (8001158 <HAL_RCC_OscConfig+0x644>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a2:	431a      	orrs	r2, r3
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0449      	lsls	r1, r1, #17
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	0549      	lsls	r1, r1, #21
 80010c2:	430a      	orrs	r2, r1
 80010c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff fa41 	bl	800054c <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fa3c 	bl	800054c <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e072      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	049b      	lsls	r3, r3, #18
 80010ea:	4013      	ands	r3, r2
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x5bc>
 80010ee:	e06a      	b.n	80011c6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 80010f6:	4917      	ldr	r1, [pc, #92]	; (8001154 <HAL_RCC_OscConfig+0x640>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fa26 	bl	800054c <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff fa21 	bl	800054c <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e057      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	049b      	lsls	r3, r3, #18
 8001120:	4013      	ands	r3, r2
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_RCC_OscConfig+0x62c>)
 800112a:	490c      	ldr	r1, [pc, #48]	; (800115c <HAL_RCC_OscConfig+0x648>)
 800112c:	400a      	ands	r2, r1
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	e049      	b.n	80011c6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d112      	bne.n	8001160 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e044      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40021000 	.word	0x40021000
 8001144:	40007000 	.word	0x40007000
 8001148:	00001388 	.word	0x00001388
 800114c:	efffffff 	.word	0xefffffff
 8001150:	ffbfffff 	.word	0xffbfffff
 8001154:	feffffff 	.word	0xfeffffff
 8001158:	11c1808c 	.word	0x11c1808c
 800115c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_RCC_OscConfig+0x6bc>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2203      	movs	r2, #3
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	429a      	cmp	r2, r3
 8001172:	d126      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2270      	movs	r2, #112	; 0x70
 8001178:	401a      	ands	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117e:	429a      	cmp	r2, r3
 8001180:	d11f      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	23fe      	movs	r3, #254	; 0xfe
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	401a      	ands	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001190:	429a      	cmp	r2, r3
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	23f8      	movs	r3, #248	; 0xf8
 8001198:	039b      	lsls	r3, r3, #14
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10e      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	051b      	lsls	r3, r3, #20
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	0f5b      	lsrs	r3, r3, #29
 80011b8:	075a      	lsls	r2, r3, #29
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b008      	add	sp, #32
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0e9      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2207      	movs	r2, #7
 80011ee:	4013      	ands	r3, r2
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d91e      	bls.n	8001234 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001208:	f7ff f9a0 	bl	800054c <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001210:	e009      	b.n	8001226 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001212:	f7ff f99b 	bl	800054c <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0ca      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2207      	movs	r2, #7
 800122c:	4013      	ands	r3, r2
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d1ee      	bne.n	8001212 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d015      	beq.n	800126a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	d006      	beq.n	8001256 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800124e:	21e0      	movs	r1, #224	; 0xe0
 8001250:	01c9      	lsls	r1, r1, #7
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	4a5d      	ldr	r2, [pc, #372]	; (80013d0 <HAL_RCC_ClockConfig+0x1fc>)
 800125c:	4013      	ands	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	4013      	ands	r3, r2
 8001272:	d057      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127c:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d12b      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e097      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d107      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	049b      	lsls	r3, r3, #18
 800129c:	4013      	ands	r3, r2
 800129e:	d11f      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e08b      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	d113      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e07f      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	2202      	movs	r2, #2
 80012ca:	4013      	ands	r3, r2
 80012cc:	d108      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e074      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e06d      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2207      	movs	r2, #7
 80012e6:	4393      	bics	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012f4:	f7ff f92a 	bl	800054c <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fc:	e009      	b.n	8001312 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fe:	f7ff f925 	bl	800054c <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e054      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2238      	movs	r2, #56	; 0x38
 8001318:	401a      	ands	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	429a      	cmp	r2, r3
 8001322:	d1ec      	bne.n	80012fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2207      	movs	r2, #7
 800132a:	4013      	ands	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d21e      	bcs.n	8001370 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2207      	movs	r2, #7
 8001338:	4393      	bics	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001344:	f7ff f902 	bl	800054c <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800134c:	e009      	b.n	8001362 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7ff f8fd 	bl	800054c <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e02c      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2207      	movs	r2, #7
 8001368:	4013      	ands	r3, r2
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2204      	movs	r2, #4
 8001376:	4013      	ands	r3, r2
 8001378:	d009      	beq.n	800138e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_RCC_ClockConfig+0x200>)
 8001380:	4013      	ands	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800138e:	f000 f829 	bl	80013e4 <HAL_RCC_GetSysClockFreq>
 8001392:	0001      	movs	r1, r0
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	220f      	movs	r2, #15
 800139c:	401a      	ands	r2, r3
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_RCC_ClockConfig+0x204>)
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	58d3      	ldr	r3, [r2, r3]
 80013a4:	221f      	movs	r2, #31
 80013a6:	4013      	ands	r3, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	40da      	lsrs	r2, r3
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_ClockConfig+0x208>)
 80013ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_ClockConfig+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff f86d 	bl	8000494 <HAL_InitTick>
 80013ba:	0003      	movs	r3, r0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40022000 	.word	0x40022000
 80013c8:	00001388 	.word	0x00001388
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffff0ff 	.word	0xfffff0ff
 80013d4:	ffff8fff 	.word	0xffff8fff
 80013d8:	08001558 	.word	0x08001558
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2238      	movs	r2, #56	; 0x38
 80013f0:	4013      	ands	r3, r2
 80013f2:	d10f      	bne.n	8001414 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0adb      	lsrs	r3, r3, #11
 80013fa:	2207      	movs	r2, #7
 80013fc:	4013      	ands	r3, r2
 80013fe:	2201      	movs	r2, #1
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	4835      	ldr	r0, [pc, #212]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800140a:	f7fe fe7b 	bl	8000104 <__udivsi3>
 800140e:	0003      	movs	r3, r0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e05d      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2238      	movs	r2, #56	; 0x38
 800141a:	4013      	ands	r3, r2
 800141c:	2b08      	cmp	r3, #8
 800141e:	d102      	bne.n	8001426 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	e054      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2238      	movs	r2, #56	; 0x38
 800142c:	4013      	ands	r3, r2
 800142e:	2b10      	cmp	r3, #16
 8001430:	d138      	bne.n	80014a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2203      	movs	r2, #3
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	2207      	movs	r2, #7
 8001444:	4013      	ands	r3, r2
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d10d      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001454:	f7fe fe56 	bl	8000104 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	0019      	movs	r1, r3
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	227f      	movs	r2, #127	; 0x7f
 8001464:	4013      	ands	r3, r2
 8001466:	434b      	muls	r3, r1
 8001468:	617b      	str	r3, [r7, #20]
        break;
 800146a:	e00d      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001470:	f7fe fe48 	bl	8000104 <__udivsi3>
 8001474:	0003      	movs	r3, r0
 8001476:	0019      	movs	r1, r3
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	227f      	movs	r2, #127	; 0x7f
 8001480:	4013      	ands	r3, r2
 8001482:	434b      	muls	r3, r1
 8001484:	617b      	str	r3, [r7, #20]
        break;
 8001486:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0f5b      	lsrs	r3, r3, #29
 800148e:	2207      	movs	r2, #7
 8001490:	4013      	ands	r3, r2
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f7fe fe33 	bl	8000104 <__udivsi3>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e015      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2238      	movs	r2, #56	; 0x38
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d103      	bne.n	80014b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2238      	movs	r2, #56	; 0x38
 80014be:	4013      	ands	r3, r2
 80014c0:	2b18      	cmp	r3, #24
 80014c2:	d103      	bne.n	80014cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014c4:	23fa      	movs	r3, #250	; 0xfa
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e001      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80014d0:	693b      	ldr	r3, [r7, #16]
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b006      	add	sp, #24
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <__libc_init_array>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	2600      	movs	r6, #0
 80014ec:	4d0c      	ldr	r5, [pc, #48]	; (8001520 <__libc_init_array+0x38>)
 80014ee:	4c0d      	ldr	r4, [pc, #52]	; (8001524 <__libc_init_array+0x3c>)
 80014f0:	1b64      	subs	r4, r4, r5
 80014f2:	10a4      	asrs	r4, r4, #2
 80014f4:	42a6      	cmp	r6, r4
 80014f6:	d109      	bne.n	800150c <__libc_init_array+0x24>
 80014f8:	2600      	movs	r6, #0
 80014fa:	f000 f821 	bl	8001540 <_init>
 80014fe:	4d0a      	ldr	r5, [pc, #40]	; (8001528 <__libc_init_array+0x40>)
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <__libc_init_array+0x44>)
 8001502:	1b64      	subs	r4, r4, r5
 8001504:	10a4      	asrs	r4, r4, #2
 8001506:	42a6      	cmp	r6, r4
 8001508:	d105      	bne.n	8001516 <__libc_init_array+0x2e>
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	00b3      	lsls	r3, r6, #2
 800150e:	58eb      	ldr	r3, [r5, r3]
 8001510:	4798      	blx	r3
 8001512:	3601      	adds	r6, #1
 8001514:	e7ee      	b.n	80014f4 <__libc_init_array+0xc>
 8001516:	00b3      	lsls	r3, r6, #2
 8001518:	58eb      	ldr	r3, [r5, r3]
 800151a:	4798      	blx	r3
 800151c:	3601      	adds	r6, #1
 800151e:	e7f2      	b.n	8001506 <__libc_init_array+0x1e>
 8001520:	08001598 	.word	0x08001598
 8001524:	08001598 	.word	0x08001598
 8001528:	08001598 	.word	0x08001598
 800152c:	0800159c 	.word	0x0800159c

08001530 <memset>:
 8001530:	0003      	movs	r3, r0
 8001532:	1882      	adds	r2, r0, r2
 8001534:	4293      	cmp	r3, r2
 8001536:	d100      	bne.n	800153a <memset+0xa>
 8001538:	4770      	bx	lr
 800153a:	7019      	strb	r1, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	e7f9      	b.n	8001534 <memset+0x4>

08001540 <_init>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr

0800154c <_fini>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr
